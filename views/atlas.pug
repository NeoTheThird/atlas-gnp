head
  title Atlas der Neuropädiatrie
  link(rel='stylesheet' href='/css/style.css')
  link(rel='stylesheet' href='https://unpkg.com/leaflet@1.3.4/dist/leaflet.css' integrity='sha512-puBpdR0798OZvTTbP4A8Ix/l+A4dHDD0DGqYW6RQ+9jxkRFclaxxQb/SJAWZfWAkuyeQUytO7+7N4QKrDh+drA==' crossorigin='')
  link(rel='stylesheet' href='https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.css')
  link(rel='stylesheet' href='https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.Default.css')
script(src='https://unpkg.com/leaflet@1.3.4/dist/leaflet.js' integrity='sha512-nMMmRyTVoLYqjP9hrbed9S+FzjZHW5gY1TWCHA5ckwXZBadntCNs8kEqAWdrb9O7rxbCaA4lKTIWjDXZxflOcA==' crossorigin='')
script(src='https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js')
#osm-map
script(type='text/javascript').
  // Create map
  var element = document.getElementById('osm-map');
  element.style = 'height:100vh;';
  var map = L.map(element);
  L.tileLayer('https://{s}.tile.osm.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="http://osm.org/copyright" target="_blank">OpenStreetMap</a> contributors | <a href="https://gesellschaft-fuer-neuropaediatrie.org/" target="_blank">Gesellschaft für Neuropädiatrie</a>'
  }).addTo(map);
  map.setView(L.latLng(47.728569,10.315784), 6);

  //- https://github.com/pointhi/leaflet-color-markers
  const icons = {
    gold: new L.Icon({
      iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-gold.png',
      shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
      iconSize: [25, 41],
      iconAnchor: [12, 41],
      popupAnchor: [1, -34],
      shadowSize: [41, 41]
    }),
    black: new L.Icon({
      iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-black.png',
      shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
      iconSize: [25, 41],
      iconAnchor: [12, 41],
      popupAnchor: [1, -34],
      shadowSize: [41, 41]
    }),
    green: new L.Icon({
      iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',
      shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
      iconSize: [25, 41],
      iconAnchor: [12, 41],
      popupAnchor: [1, -34],
      shadowSize: [41, 41]
    }),
    grey: new L.Icon({
      iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-grey.png',
      shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
      iconSize: [25, 41],
      iconAnchor: [12, 41],
      popupAnchor: [1, -34],
      shadowSize: [41, 41]
    }),
    blue: new L.Icon({
      iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png',
      shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
      iconSize: [25, 41],
      iconAnchor: [12, 41],
      popupAnchor: [1, -34],
      shadowSize: [41, 41]
    })
  };

  var legend = L.control({position: 'bottomleft'});
  legend.onAdd = function (map) {
    let div = L.DomUtil.create('div', 'info legend');
    let labels = ['<strong>Legende</strong>'];
    let categories = [
      { color: "blue", type: "Mitglied" },
      { color: "gold", type: "Ehrenmitglied" },
      { color: "green", type: "Juniormitglied" },
      { color: "grey", type: "Seniormitglied" },
      { color: "black", type: "Außerord. Mitglied" }
    ];

    categories.forEach(c => {
      labels.push('<span class="circle" style="background-color:' + c.color + '"></span> ' + c.type);
    });
    div.innerHTML = labels.join('<br>');
    return div;
  };
  legend.addTo(map);

  const Http = new XMLHttpRequest();
  const url='/api/getAtlas';
  Http.open("GET", url);
  Http.send();

  let added = false
  Http.onreadystatechange = (e) => {
    console.log(e);
    let members = JSON.parse(Http.responseText);

    if (!added) {
      added = true;
      let markers = L.markerClusterGroup();
      members.forEach(member => {
        let marker = L.marker(
          member.latlong,
          {
            title: member.name,
            icon: icons[member.color]
          }
        );
        if (member.popup) {
          marker.bindPopup(member.popup)
        }
        markers.addLayer(marker);
      });
      map.addLayer(markers)
    }
  }
